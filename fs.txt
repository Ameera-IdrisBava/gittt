//CRUD in typescript

import { Book } from "./book";
import { Member } from "./Member";
export namespace Lib{
export  class Libr
{
    book:Book[]
    mem:Member
    constructor(  book:Book[]
        ,mem:Member)
    {
        this.book=book,
this.mem=mem
    }
view():void{
    console.log(`books: ${JSON.stringify(this.book)} mem  :${JSON.stringify(this.mem)}`)
}

addbook(boo:Book):void{
    this.book.push(boo)
    console.log(`book added :${JSON.stringify(this.book)}`)
}
rembook(boo: Book): void {
    for (let i = 0; i < this.book.length; i++) {
        if (this.book[i].bkid === boo.bkid) {
            this.book.splice(i, 1);
            console.log(`Removed: ${JSON.stringify(boo)}`);
            break;
        }
    }

    console.log("After removed:");
    this.book.forEach((b) => {
        console.log(`${b.bkid}, ${b.bkname}`);
    });
}

bobook(boo:Book):void{
    console.log(`borrowing: ${JSON.stringify(boo)}`)
}
}
}

//html
// Employee interface
interface Emp {
    id: number;
    name: string;
    department: string;
}

// Employee manager class
class Em {
    employees: Emp[] = [];

    // Add employee
    add(id: number, name: string, department: string): void {
        const newEmp: Emp = { id, name, department };
        this.employees.push(newEmp);
    }

    // Get all employees
    getAll(): Emp[] {
        return this.employees;
    }

    // Delete employee by ID
    deleteById(id: number): void {
        this.employees = this.employees.filter(emp => emp.id !== id);
    }
}

const manager = new Em();

// Add employee from input fields
function addEmployee(): void {
    const idInput = document.getElementById("empId") as HTMLInputElement;
    const nameInput = document.getElementById("empName") as HTMLInputElement;
    const deptInput = document.getElementById("empDept") as HTMLInputElement;

    const id = parseInt(idInput.value);
    const name = nameInput.value;
    const department = deptInput.value;

    if (!isNaN(id) && name && department) {
        manager.add(id, name, department);
        alert("Employee added!");
    } else {
        alert("Please enter all fields correctly.");
    }
}

// Display employees as plain text
function displayEmployees(): void {
    const list = document.getElementById("employeeList") as HTMLDivElement;
    list.innerHTML = "";

    const employees = manager.getAll();
    if (employees.length === 0) {
        list.innerHTML = "<p>No employees.</p>";
        return;
    }

    employees.forEach(emp => {
        const empDiv = document.createElement("div");
        empDiv.textContent = `ID: ${emp.id}, Name: ${emp.name}, Dept: ${emp.department}`;
        list.appendChild(empDiv);
    });
}

// Delete employee by ID
function deleteEmployee(): void {
    const idInput = document.getElementById("deleteId") as HTMLInputElement;
    const id = parseInt(idInput.value);

    if (!isNaN(id)) {
        manager.deleteById(id);
        alert(`Employee with ID ${id} deleted.`);
    } else {
        alert("Enter a valid ID to delete.");
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Employee Manager</title>
</head>
<body>
    <h2>Add Employee</h2>
    <label>ID: </label><input type="number" id="empId"><br>
    <label>Name: </label><input type="text" id="empName"><br>
    <label>Department: </label><input type="text" id="empDept"><br>
    <button onclick="addEmployee()">Add</button>
    <button onclick="displayEmployees()">Display</button>

    <h2>Delete Employee</h2>
    <label>ID to delete: </label><input type="number" id="deleteId"><br>
    <button onclick="deleteEmployee()">Delete</button>

    <hr>
    <div id="employeeList"></div>

    <script src="Emp.js"></script>
</body>
</html>

//ds linked

class OrderNode {
  constructor(
    public orderId: number,
    public next: OrderNode | null = null
  ) {}
}

class OrderList {
  head: OrderNode | null = null; // Now public by default
  tail: OrderNode | null = null; // Now public by default

  addOrder(orderId: number) {
    const newOrder = new OrderNode(orderId);
    if (!this.head) {
      this.head = this.tail = newOrder;
    } else {
      this.tail!.next = newOrder;
      this.tail = newOrder;
    }
    console.log(`Order ${orderId} added.`);
  }

  processOrder() {
    if (!this.head) {
      console.log("No orders to process.");
      return;
    }
    console.log(`Processing order: ${this.head.orderId}`);
    this.head = this.head.next;
  }

  showOrders() {
    let current = this.head;
    let orders: number[] = [];
    while (current) {
      orders.push(current.orderId);
      current = current.next;
    }
    console.log("Pending Orders:", orders);
  }
}

// Example usage
const orderList = new OrderList();
orderList.addOrder(101);
orderList.addOrder(102);
orderList.processOrder();
orderList.showOrders();

// Optional: Accessing head and tail directly
console.log("Accessing head directly:", orderList.head);
console.log("Accessing tail directly:", orderList.tail);

//voting

class VotingSystem {
  votes: Map<string, number> = new Map(); // Now public by default

  castVote(candidate: string) {
    if (!candidate) {
      console.log("Invalid vote.");
      return;
    }

    const currentVotes = this.votes.get(candidate) || 0;
    this.votes.set(candidate, currentVotes + 1);
    console.log(`Vote casted for ${candidate}`);
  }

  findWinner() {
    let maxVotes = 0;
    let winners: string[] = [];

    for (const [candidate, count] of this.votes.entries()) {
      if (count > maxVotes) {
        maxVotes = count;
        winners = [candidate];
      } else if (count === maxVotes) {
        winners.push(candidate);
      }
    }

    if (winners.length > 1) {
      console.log("It's a tie between:", winners.join(", "));
    } else {
      console.log("Winner is:", winners[0]);
    }
  }

  showVotes() {
    console.log("Vote Counts:", this.votes);
  }
}

// Example usage
const voting = new VotingSystem();
voting.castVote("Alice");
voting.castVote("Bob");
voting.castVote("Alice");
voting.findWinner();
voting.showVotes();

// Optional: Accessing votes directly
console.log("Accessing votes directly:", voting.votes);
